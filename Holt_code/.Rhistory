library(sf)
library(here)
library(plotly)
library(ggplot2)
library(ggiraph)
library(dplyr)
library(forcats)
library(patchwork)
library(openxlsx)
# Load data
# Percentage of population minus percentage of people died
# If value less than 0, affect it more than other race, smaller the percentage
#more than proportion of people in that ethnicity died
plotting_data <- read.xlsx("Plotting_data.xlsx")
selection_list <- c("White", "Black", "Native_American", "Asian", "Pacific_Islander", "Hispanic")
US_state_hexgrid <- sf::st_read("us_states_hexgrid.geojson")
US_state_hexgrid <- US_state_hexgrid %>%
rename(State = 'iso3166_2')
# Define UI
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("Interaction Plot for Covid Death Percentage by Ethnicity"),
h2("Wendy Shi"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Selection for GGiraph",
selectInput(inputId = "ethni_select",
label = "Selecting Race:",
choices = selection_list,
selected = "White"))
)
),
mainPanel(
girafeOutput("interactive_plot") # Output for the combined interactive plot
)
)
)
# Define server logic
server <- function(input, output) {
output$interactive_plot <- renderGirafe({
# Generate geo plot data
geo_data <- US_state_hexgrid %>%
inner_join(plotting_data, by = c("State" = "State")) %>%
mutate(tooltip = paste0(
"<b>State:</b> ", State_name, "<br>",
"<b>Ethnicity:</b> ", input$ethni_select, "<br>",
"<b>Difference:</b> ", !!sym(input$ethni_select)
))
geo_interactive_plot <- ggplot(geo_data) +
geom_sf_interactive(
aes(fill = !!sym(input$ethni_select), tooltip = tooltip, data_id = State),
color = "white"
) +
geom_sf_text(aes(label = State), color = "white", size = 3) +
scale_fill_distiller(palette = "YlGnBu", name = "Index value") +
labs(title = "Percentage of Death and Percentage of Populatoin Difference",
subtitle = "A visualization of how covid affect different ethnicity",
caption = "Source: Center of Disease Control") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 11),
plot.subtitle = element_text(hjust = 0.5, face = "bold", size = 9),
plot.caption  = element_text(size = 6),
legend.position = "bottom",
legend.key.width = unit(2, "cm"),
legend.key.height = unit(0.5, "cm"))
# Generate bar plot data
subset <- plotting_data %>%
select(State, State_name, all_of(input$ethni_select)) %>%
arrange(!!sym(input$ethni_select))
top_5 <- subset %>%
arrange(desc(!!sym(input$ethni_select))) %>%
slice(1:5)
bottom_5 <- subset %>%
arrange(!!sym(input$ethni_select)) %>%
slice(1:5)
result <- bind_rows(top_5, bottom_5) %>%
mutate(tooltip = paste0(
"<b>State:</b> ", State_name, "<br>",
"<b>Ethnicity:</b> ", input$ethni_select, "<br>",
"<b>Difference:</b> ", !!sym(input$ethni_select)
))
bar_interactive <- ggplot(result, aes(x = fct_reorder(as.factor(State), !!sym(input$ethni_select)),
y = !!sym(input$ethni_select),
fill = !!sym(input$ethni_select) > 0)) +
geom_bar_interactive(stat = "identity",
aes(tooltip = tooltip, data_id = State),
show.legend = FALSE) +
scale_fill_manual(values = c("pink", "lightblue")) +
labs(title = "Top5 and Bottom 5 Difference",
x = "States",
y = "Percentage") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 8))
# Combine plots
combined_plot <- (geo_interactive_plot / bar_interactive) + plot_layout(heights = c(2.5, 1))
interactive_combined_plot <- girafe(ggobj = combined_plot)
# Apply hover options
girafe_options(
interactive_combined_plot,
opts_hover(css = "fill:red;stroke:black;")
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Testing.R')
library(shiny)
library(shinythemes)
library(tidyverse)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(sf)
library(here)
library(plotly)
library(ggplot2)
library(ggiraph)
library(dplyr)
library(forcats)
library(patchwork)
library(openxlsx)
# Load data
# Percentage of population minus percentage of people died
# If value less than 0, affect it more than other race, smaller the percentage
#more than proportion of people in that ethnicity died
plotting_data <- read.xlsx("Plotting_data.xlsx")
selection_list <- c("White", "Black", "Native_American", "Asian", "Pacific_Islander", "Hispanic")
US_state_hexgrid <- sf::st_read("us_states_hexgrid.geojson")
US_state_hexgrid <- US_state_hexgrid %>%
rename(State = 'iso3166_2')
# Define UI
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("Interaction Plot for Covid Death Percentage by Ethnicity"),
h2("Wendy Shi"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Selection for GGiraph",
selectInput(inputId = "ethni_select",
label = "Selecting Race:",
choices = selection_list,
selected = "White"))
)
),
mainPanel(
tabsetPanel(
tabPanel("Plot 1",
tags$h3("Percentage and Count for the Type of Plant in Selected Country"),
tags$h5(tags$b("Hovers on the plot for more information")),
tags$img(src = "deathratepercounty.png", alt = "Example PNG", style = "width:50%; height:auto;")),
tabPanel("ggraph plot",
tags$h3("Total Number of Power Plants by Country"),
tags$h5(tags$b("Displays the total count of power plants for selected countries")),
girafeOutput("interactive_plot")),
)
)
)
)
# Define server logic
server <- function(input, output) {
output$interactive_plot <- renderGirafe({
# Generate geo plot data
geo_data <- US_state_hexgrid %>%
inner_join(plotting_data, by = c("State" = "State")) %>%
mutate(tooltip = paste0(
"<b>State:</b> ", State_name, "<br>",
"<b>Ethnicity:</b> ", input$ethni_select, "<br>",
"<b>Difference:</b> ", !!sym(input$ethni_select)
))
geo_interactive_plot <- ggplot(geo_data) +
geom_sf_interactive(
aes(fill = !!sym(input$ethni_select), tooltip = tooltip, data_id = State),
color = "white"
) +
geom_sf_text(aes(label = State), color = "white", size = 3) +
scale_fill_distiller(palette = "YlGnBu", name = "Index value") +
labs(title = "Percentage of Death and Percentage of Populatoin Difference",
subtitle = "A visualization of how covid affect different ethnicity",
caption = "Source: Center of Disease Control") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 11),
plot.subtitle = element_text(hjust = 0.5, face = "bold", size = 9),
plot.caption  = element_text(size = 6),
legend.position = "bottom",
legend.key.width = unit(2, "cm"),
legend.key.height = unit(0.5, "cm"))
# Generate bar plot data
subset <- plotting_data %>%
select(State, State_name, all_of(input$ethni_select)) %>%
arrange(!!sym(input$ethni_select))
top_5 <- subset %>%
arrange(desc(!!sym(input$ethni_select))) %>%
slice(1:5)
bottom_5 <- subset %>%
arrange(!!sym(input$ethni_select)) %>%
slice(1:5)
result <- bind_rows(top_5, bottom_5) %>%
mutate(tooltip = paste0(
"<b>State:</b> ", State_name, "<br>",
"<b>Ethnicity:</b> ", input$ethni_select, "<br>",
"<b>Difference:</b> ", !!sym(input$ethni_select)
))
bar_interactive <- ggplot(result, aes(x = fct_reorder(as.factor(State), !!sym(input$ethni_select)),
y = !!sym(input$ethni_select),
fill = !!sym(input$ethni_select) > 0)) +
geom_bar_interactive(stat = "identity",
aes(tooltip = tooltip, data_id = State),
show.legend = FALSE) +
scale_fill_manual(values = c("pink", "lightblue")) +
labs(title = "Top5 and Bottom 5 Difference",
x = "States",
y = "Percentage") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 8))
# Combine plots
combined_plot <- (geo_interactive_plot / bar_interactive) + plot_layout(heights = c(2.5, 1))
interactive_combined_plot <- girafe(ggobj = combined_plot)
# Apply hover options
girafe_options(
interactive_combined_plot,
opts_hover(css = "fill:red;stroke:black;")
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("Interaction Plot for Covid Death Percentage by Ethnicity"),
h2("Wendy Shi"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Selection for GGiraph",
selectInput(inputId = "ethni_select",
label = "Selecting Race:",
choices = selection_list,
selected = "White"))
)
),
mainPanel(
tabsetPanel(
tabPanel("Plot 1",
tags$h3("Percentage and Count for the Type of Plant in Selected Country"),
tags$h5(tags$b("Hovers on the plot for more information")),
tags$img(src = "deathratepercounty.png", alt = "Death rate", style = "width:50%; height:auto;")),
tabPanel("ggraph plot",
tags$h3("Total Number of Power Plants by Country"),
tags$h5(tags$b("Displays the total count of power plants for selected countries")),
girafeOutput("interactive_plot")),
)
)
)
)
library(shiny)
library(shinythemes)
library(tidyverse)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(sf)
library(here)
library(plotly)
library(ggplot2)
library(ggiraph)
library(dplyr)
library(forcats)
library(patchwork)
library(openxlsx)
# Load data
# Percentage of population minus percentage of people died
# If value less than 0, affect it more than other race, smaller the percentage
#more than proportion of people in that ethnicity died
plotting_data <- read.xlsx("Plotting_data.xlsx")
selection_list <- c("White", "Black", "Native_American", "Asian", "Pacific_Islander", "Hispanic")
US_state_hexgrid <- sf::st_read("us_states_hexgrid.geojson")
US_state_hexgrid <- US_state_hexgrid %>%
rename(State = 'iso3166_2')
# Define UI
ui <- fluidPage(
theme = shinytheme("flatly"),
titlePanel("Interaction Plot for Covid Death Percentage by Ethnicity"),
h2("Wendy Shi"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Selection for GGiraph",
selectInput(inputId = "ethni_select",
label = "Selecting Race:",
choices = selection_list,
selected = "White"))
)
),
mainPanel(
tabsetPanel(
tabPanel("Plot 1",
tags$h3("Percentage and Count for the Type of Plant in Selected Country"),
tags$h5(tags$b("Hovers on the plot for more information")),
tags$img(src = "deathratepercounty.png", alt = "Death rate", style = "width:50%; height:auto;")),
tabPanel("ggraph plot",
tags$h3("Total Number of Power Plants by Country"),
tags$h5(tags$b("Displays the total count of power plants for selected countries")),
girafeOutput("interactive_plot")),
)
)
)
)
# Define server logic
server <- function(input, output) {
output$interactive_plot <- renderGirafe({
# Generate geo plot data
geo_data <- US_state_hexgrid %>%
inner_join(plotting_data, by = c("State" = "State")) %>%
mutate(tooltip = paste0(
"<b>State:</b> ", State_name, "<br>",
"<b>Ethnicity:</b> ", input$ethni_select, "<br>",
"<b>Difference:</b> ", !!sym(input$ethni_select)
))
geo_interactive_plot <- ggplot(geo_data) +
geom_sf_interactive(
aes(fill = !!sym(input$ethni_select), tooltip = tooltip, data_id = State),
color = "white"
) +
geom_sf_text(aes(label = State), color = "white", size = 3) +
scale_fill_distiller(palette = "YlGnBu", name = "Index value") +
labs(title = "Percentage of Death and Percentage of Populatoin Difference",
subtitle = "A visualization of how covid affect different ethnicity",
caption = "Source: Center of Disease Control") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 11),
plot.subtitle = element_text(hjust = 0.5, face = "bold", size = 9),
plot.caption  = element_text(size = 6),
legend.position = "bottom",
legend.key.width = unit(2, "cm"),
legend.key.height = unit(0.5, "cm"))
# Generate bar plot data
subset <- plotting_data %>%
select(State, State_name, all_of(input$ethni_select)) %>%
arrange(!!sym(input$ethni_select))
top_5 <- subset %>%
arrange(desc(!!sym(input$ethni_select))) %>%
slice(1:5)
bottom_5 <- subset %>%
arrange(!!sym(input$ethni_select)) %>%
slice(1:5)
result <- bind_rows(top_5, bottom_5) %>%
mutate(tooltip = paste0(
"<b>State:</b> ", State_name, "<br>",
"<b>Ethnicity:</b> ", input$ethni_select, "<br>",
"<b>Difference:</b> ", !!sym(input$ethni_select)
))
bar_interactive <- ggplot(result, aes(x = fct_reorder(as.factor(State), !!sym(input$ethni_select)),
y = !!sym(input$ethni_select),
fill = !!sym(input$ethni_select) > 0)) +
geom_bar_interactive(stat = "identity",
aes(tooltip = tooltip, data_id = State),
show.legend = FALSE) +
scale_fill_manual(values = c("pink", "lightblue")) +
labs(title = "Top5 and Bottom 5 Difference",
x = "States",
y = "Percentage") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 8))
# Combine plots
combined_plot <- (geo_interactive_plot / bar_interactive) + plot_layout(heights = c(2.5, 1))
interactive_combined_plot <- girafe(ggobj = combined_plot)
# Apply hover options
girafe_options(
interactive_combined_plot,
opts_hover(css = "fill:red;stroke:black;")
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Testing.R')
runApp('Testing.R')
runApp('Testing.R')
runApp('~/Desktop/Data Vish/Homework2/Shiny_App_Hw2_Shi')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_shiny/Testing.R')
runApp('~/Desktop/Group_Shiny_Testing')
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidycensus)
library(tigris)
library(sf)
library(plotly)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidycensus)
library(tigris)
library(sf)
library(plotly)
# import election data
election_2020 <- read_csv("us_election_2020.csv")
# import election data
election_2020 <- read_csv("us_election_2020.csv")
# import covid data
covid_deaths_per_100k <- read_csv("covid_deaths_per_100K.csv")
# import election data
election_2020 <- read_csv("../Data/us_election_2020.csv")
election_2020
# import election data
election_2020 <- read_csv("../Data/us_election_2020.csv")
#election_2020
# import election data
election_2020 <- read_csv("../Data/us_election_2020.csv")
#election_2020
# import covid data
covid_deaths_per_100k <- read_csv("../Data/covid_deaths_per_100K.csv")
#covid_deaths_per_100k
# merge data
state_deaths_per_100k <- left_join(covid_deaths_per_100k, election_2020, by = c("STATE" = "state_abr"))
#state_deaths_per_100k
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidycensus)
library(tigris)
library(sf)
library(plotly)
# import election data
election_2020 <- read_csv("../Data/us_election_2020.csv")
#election_2020
# import covid data
covid_deaths_per_100k <- read_csv("../Data/covid_deaths_per_100K.csv")
#covid_deaths_per_100k
# merge data
state_deaths_per_100k <- left_join(covid_deaths_per_100k, election_2020, by = c("STATE" = "state_abr"))
#state_deaths_per_100k
# filter data
state_deaths_per_100k <- state_deaths_per_100k %>%
filter(YEAR == 2020) %>%
mutate(
winner = case_when(
trump_pct > biden_pct ~ "Trump",
biden_pct > trump_pct ~ "Biden",
TRUE ~ "Tie"  # Optional for ties
),
winning_pct = pmax(trump_pct, biden_pct) # Max percentage of the winner
)
# create plot of relationship with points and regression line
gg <- ggplot(state_deaths_per_100k, aes(x = winning_pct, y = RATE)) +
# Points colored by winner
geom_point(aes(color = winner,
text = paste0("State: ", state,
"<br>Winner: ", winner,
"<br>Vote %: ", winning_pct,
"<br>Deaths per 100k: ", RATE)),
size = 3, alpha = 0.7) +
# regression line for Trump
geom_smooth(data = filter(state_deaths_per_100k, winner == "Trump"),
aes(x = winning_pct, y = RATE, color = "Trump"),
method = "lm", se = FALSE, linetype = "dashed") +
# regression line for Biden
geom_smooth(data = filter(state_deaths_per_100k, winner == "Biden"),
aes(x = winning_pct, y = RATE, color = "Biden"),
method = "lm", se = FALSE, linetype = "dashed") +
scale_color_manual(
name = "Winner",
values = c("Trump" = "red", "Biden" = "blue", "Tie" = "gray"),
labels = c("Trump (Red)", "Biden (Blue)", "Tie (Gray)")
) +
labs(
title = "COVID-19 Death Rate vs. Voting Percentage (2020 Election)",
x = "Winning Candidate Voting Percentage",
y = "COVID-19 Deaths per 100k",
caption = "Source: Your Data Source"
) +
theme_minimal()
# convert to interactive plotly
interactive_plot <- ggplotly(gg, tooltip = "text")
# display
interactive_plot
htmlwidgets::saveWidget(as_widget(interactive_plot), "covid_election2020_plot.html")
